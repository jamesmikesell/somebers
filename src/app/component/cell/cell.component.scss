:host {
  position: relative;
  --color-1: light-dark(#ff8f8f, #943501);
  --color-2: light-dark(#ffad63, #50322d);
  --color-3: light-dark(#fff67d, #817d00);
  --color-4: light-dark(#91d594, #1b5e20);
  --color-5: light-dark(#4beff5, #0062af);
  --color-6: light-dark(#62acf6, #282a93);
  --color-7: light-dark(#a0a7c7, #540dab);
  --color-8: light-dark(#e8acff, #9e0b91);
  --color-9: light-dark(#ff55cd, #840046);
  // These need to be defined in the parent component css... if things are displaying weird it's likely because
  // the defaults are being used here as it can't find the value specified in the parent.
  --_headerSpacing: var(--headerSpacing, -100px);
  --_cellGap: var(--cellGap, -100px);
}


.disable-animation,
.disable-animation *,
.disable-animation::before,
.disable-animation::after,
.disable-animation *::before,
.disable-animation *::after {
  animation: none !important;
  transition: none !important;
}


.cell-bg::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: -1;
  border-radius: inherit;
}

.cell-fade::before {
  // background fading
  transition: filter 0.5s ease-out, opacity 0.5s ease-out;
}

.bg-muted {
  color: var(--mat-sys-on-surface-variant);

  &::before {
    background: var(--mat-sys-surface-variant);
  }
}

.bg-muted.hidden.cell {
  box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--mat-sys-surface-variant);
}

.color-1 {
  &::before {
    background-color: var(--color-1);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-1);
  }

  // Shape mode: use clip-path instead of background
  &.shape::before {
    background: transparent;
    clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
    background-color: var(--color-1);
    border-radius: 0; // Remove border radius for shapes
  }
}

.color-2 {
  &::before {
    background-color: var(--color-2);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-2);
  }

  &.shape::before {
    background: transparent;
    clip-path: polygon(20% 0%, 80% 0%, 80% 20%, 100% 20%, 100% 80%, 80% 80%, 80% 100%, 20% 100%, 20% 80%, 0% 80%, 0% 20%, 20% 20%);
    background-color: var(--color-2);
    border-radius: 0;
  }
}

.color-3 {
  &::before {
    background-color: var(--color-3);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-3);
  }

  &.shape::before {
    background: transparent;
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
    background-color: var(--color-3);
    border-radius: 0;
  }
}

.color-4 {
  &::before {
    background-color: var(--color-4);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-4);
  }

  &.shape::before {
    background: transparent;
    clip-path: polygon(50% 0%, 90% 20%, 100% 60%, 75% 100%, 25% 100%, 0% 60%, 10% 20%);
    background-color: var(--color-4);
    border-radius: 0;
  }
}

.color-5 {
  &::before {
    background-color: var(--color-5);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-5);
  }

  &.shape::before {
    background: transparent;
    clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
    background-color: var(--color-5);
    border-radius: 0;
  }
}

.color-6 {
  &::before {
    background-color: var(--color-6);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-6);
  }

  &.shape::before {
    background: transparent;
    clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 50% 100%, 0% 75%);
    background-color: var(--color-6);
    border-radius: 0;
  }
}

.color-7 {
  &::before {
    background-color: var(--color-7);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-7);
  }

  &.shape::before {
    background: transparent;
    clip-path: polygon(20% 0%, 80% 0%, 100% 100%, 0% 100%);
    background-color: var(--color-7);
    border-radius: 0;
  }
}

.color-8 {
  &::before {
    background-color: var(--color-8);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-8);
  }

  &.shape::before {
    background: transparent;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    background-color: var(--color-8);
    border-radius: 0;
  }
}

.color-9 {
  &::before {
    background-color: var(--color-9);
  }

  &.hidden {
    box-shadow: 0px 0px calc(14cqmin / var(--columnCount)) 0px var(--color-9);
  }


  // &.shape::before {
  // no need for a custom shape, we'll just leave one of the cells with a solid BG
  // }
}

.cell {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  aspect-ratio: 1;
  border-radius: calc(2cqmin / var(--columnCount) * 3);
  width: calc((100cqmin - var(--_headerSpacing) - ((var(--columnCount) - 2) * var(--_cellGap)))/ var(--columnCount));
}

.cell.hidden::before {
  filter: blur(10px);
  opacity: 0;
}

.corner-number {
  position: absolute;
  top: 0cqmin;
  left: 0cqmin;
  font-size: calc(7cqmin / var(--columnCount) * 3);
  padding-left: calc(1.3cqmin / var(--columnCount) * 3);
  padding-right: calc(1.3cqmin / var(--columnCount) * 3);
  border-radius: calc(2cqmin / var(--columnCount) * 3);
  text-align: center;
}

.hidden .corner-number {
  visibility: hidden;
}

.main-number {
  font-size: calc(17cqmin / var(--columnCount) * 3);
  transition: filter 0.5s ease-out, opacity 0.5s ease-out;
}

.main-number.cleared-text {
  filter: blur(5px);
  opacity: 0;
}

.circle {
  border: 0.5cqmin solid;
  border-radius: 50%;
  width: calc(20cqmin / var(--columnCount) * 3);
  height: calc(20cqmin / var(--columnCount) * 3);
  display: flex;
  align-items: center;
  justify-content: center;
}

@keyframes wiggle {

  0%,
  100% {
    transform: rotate(0deg) translateX(0);
  }

  10% {
    transform: rotate(14deg) translateX(-5px);
  }

  30% {
    transform: rotate(-8deg) translateX(5px);
  }

  50% {
    transform: rotate(4deg) translateX(-3px);
  }

  70% {
    transform: rotate(-2deg) translateX(3px);
  }

  90% {
    transform: rotate(1deg) translateX(0);
  }
}

.wiggle {
  animation: wiggle 0.8s ease-in-out;
}

@keyframes spinDashed {
  to {
    transform: rotate(360deg);
  }
}

.processing::after {
  content: '';
  position: absolute;
  inset: -6px;
  border: 3px dashed light-dark(rgb(0, 106, 255), rgba(0, 200, 255, 0.8));
  border-radius: 50%;
  animation: spinDashed 4s ease-in-out infinite;
  z-index: 1;
}

@keyframes magnify-and-move {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  30% {
    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
  }

  100% {
    transform: scale(var(--scaleFactor)) translateY(calc(-60cqmin / var(--columnCount))) translateX(var(--moveX));
    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
  }
}

.magnifier-view {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  pointer-events: none;
  display: flex;
  align-items: center;
  justify-content: center;

  .cell {
    animation: magnify-and-move 0.15s ease-out forwards;
    flex: 0 0 auto;
    background-color: var(--mat-sys-background);
  }
}