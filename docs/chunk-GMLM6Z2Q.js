import{a as p}from"./chunk-KBBQB6YI.js";import"./chunk-AH3KB6OD.js";var x=class{randomNumberGenerator;constructor(e){this.randomNumberGenerator=new p(p.generateFromSeed(e)*Number.MAX_SAFE_INTEGER)}generateRandomContiguousGroups(e){if(!Number.isInteger(e)||e<=0)throw new Error("n must be a positive integer");if(e===1)return[[1]];let r=e*e,s=this.buildNeighborCache(e),t=new Array(r),m=new Array(e),f=new Array(4),i=2**(e*2-2);for(let g=0;g<i;g++){for(let n=0;n<r;n++)t[n]=n;this.shuffleInPlace(t);let l=new Int16Array(r),b=new Int16Array(e+1),u=Array.from({length:e+1},()=>new Set);for(let n=1;n<=e;n++){let o=t[n-1];l[o]=n,b[n]=1,this.hasUnassignedNeighbor(o,l,s[o])&&u[n].add(o)}let w=e,A=!1;for(;w<r;){let n=0;for(let a=1;a<=e;a++)b[a]<e&&u[a].size>0&&(m[n++]=a);if(n===0){A=!0;break}let o=m[this.randomNumberGenerator.next()*n|0],h=this.pickRandomFromSet(u[o]),y=s[h],d=0;for(let a=0;a<y.length;a++){let N=y[a];l[N]===0&&(f[d++]=N)}if(d===0){u[o].delete(h);continue}let c=f[this.randomNumberGenerator.next()*d|0];l[c]=o,b[o]++,w++,this.hasUnassignedNeighbor(c,l,s[c])&&u[o].add(c),this.hasUnassignedNeighbor(h,l,s[h])||u[o].delete(h)}if(!A){let n=Array.from({length:e},()=>Array(e).fill(0));for(let o=0;o<r;o++)n[Math.floor(o/e)][o%e]=l[o];return n}}throw new Error("Failed to generate after retries; try increasing maxAttempts or using a different n.")}hasUnassignedNeighbor(e,r,s){for(let t=0;t<s.length;t++)if(r[s[t]]===0)return!0;return!1}buildNeighborCache(e){let r=e*e,s=new Array(r);for(let t=0;t<r;t++){let m=Math.floor(t/e),f=t-m*e,i=[];m>0&&i.push(t-e),m<e-1&&i.push(t+e),f>0&&i.push(t-1),f<e-1&&i.push(t+1),s[t]=i}return s}pickRandomFromSet(e){let r=this.randomNumberGenerator.next()*e.size|0,s=0;for(let t of e){if(s===r)return t;s++}throw new Error("Attempted to pick from an empty set.")}shuffleInPlace(e){for(let r=e.length-1;r>0;r--){let s=this.randomNumberGenerator.next()*(r+1)|0,t=e[r];e[r]=e[s],e[s]=t}}};export{x as BoardGroupGeneratorV1};
